import os
import random
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from flask import Flask, request

# === CONFIGURATION ===
TOKEN = "7771606520:AAFp9ZonHi-MSgi1Jah_M9KmrgGKzH9v_Lk"
bot = telebot.TeleBot(TOKEN, threaded=False)
bot_username = bot.get_me().username
WEBHOOK_URL = f"https://TON-NOM-RENDER.onrender.com/{TOKEN}"  # Replace with your Render URL

app = Flask(__name__)

# === QUESTIONS PAR NIVEAU ===
questions = {
    "Icebreaker Fun": [
        "Quel est ton emoji pr√©f√©r√© pour draguer ?",
        "Si on devait avoir un nom d‚Äô√©quipe, ce serait quoi ?",
        "Si tu devais m‚Äôenvoyer un seul m√®me pour r√©sumer notre relation, ce serait lequel ?",
        "Est-ce que tu chantes sous la douche ? Preuve audio ?",
        "Quelle est ta pire gaffe en visio ou appel vocal ?",
        "Si tu pouvais d√Æner avec un personnage fictif, ce serait qui ?",
        "As-tu un surnom marrant ou g√™nant que tu n‚Äôaimes pas trop ?",
        "Tu pr√©f√®res avoir des doigts en spaghetti ou des jambes en mousse ?",
        "Quelle chanson te donne instantan√©ment la p√™che ?",
        "Envoie un selfie avec la t√™te que tu fais quand tu veux s√©duire (si t‚Äôoses üòè).",
        "Quelle est l‚Äô√©motic√¥ne que tu utilises trop souvent ?",
        "√Ä quelle heure de la journ√©e es-tu au top de ta forme ?",
        "Tu es plut√¥t ‚Äúje parle trop‚Äù ou ‚Äúje r√©ponds en 3 mots‚Äù en couple √† distance ?"
    ],
    "Deep & Curious": [
        "√Ä distance, de quoi as-tu le plus peur dans une relation ?",
        "Quelle est la chose qui te manque le plus chez moi en ce moment ?",
        "Quelle serait pour toi la pire rupture virtuelle ?",
        "Que dirais-tu dans un vocal si tu devais me faire fondre ce soir ?",
        "Qu‚Äôest-ce qui te manque le plus quand on est loin ?",
        "As-tu d√©j√† aim√© quelqu‚Äôun √† distance ? Raconte.",
        "Quelle est ta plus grande peur dans une relation ?",
        "Que veux-tu qu‚Äôon n‚Äôoublie jamais de faire ensemble, peu importe la distance ?",
        "As-tu une blessure du pass√© que tu n‚Äôas pas encore totalement gu√©rie ?",
        "Quel est ton langage de l‚Äôamour ?",
        "Quand te sens-tu vraiment √©cout√©.e ?",
        "Quelle qualit√© aimerais-tu am√©liorer chez toi ?",
        "As-tu d√©j√† pleur√© √† cause de l‚Äôamour ?",
        "Qu‚Äôest-ce qui te rassure instantan√©ment quand on est loin l‚Äôun de l‚Äôautre ?"
    ],
    "Flirty & Cheeky": [
        "D√©cris-moi la tenue que tu voudrais que je porte pour toi maintenant.",
        "Tu pr√©f√®res les messages coquins ou les photos sexy ?",
        "En visio, tu me regardes plus dans les yeux‚Ä¶ ou ailleurs ?",
        "Si tu pouvais m‚Äôembrasser l√† tout de suite, tu commencerais par o√π ?",
        "Si je t‚Äôenvoie un message ‚ÄúJ‚Äôai besoin de toi l√†, tout de suite‚Äù, tu fais quoi ?",
        "Tu pr√©f√®res qu‚Äôon te chuchote des mots doux ou des choses coquines ?",
        "Que portes-tu g√©n√©ralement quand tu es seul¬∑e √† la maison ?",
        "Quel est le plus long message sexy que tu as d√©j√† envoy√© ?",
        "Quelle partie de mon corps as-tu le plus envie de d√©couvrir en vrai ?",
        "Pr√©f√®res-tu un strip‚Äëtease par visio ou un vocal tr√®s explicite ?",
        "Quelle est ta plus grande tentation quand tu me regardes √† l‚Äô√©cran ?",
        "M‚Äôenverrais‚Äëtu une photo sexy si je te le demande gentiment ?",
        "Quel mot ou geste de ma part pourrait te rendre fou/folle √† distance ?",
        "T‚Äôas d√©j√† fantasm√© en plein appel vid√©o ?"
    ],
    "Hot & Spicy": [
        "D√©cris-moi un fantasme qu‚Äôon pourrait r√©aliser m√™me √† distance.",
        "Tu m‚Äôenvoies un vocal en murmurant une envie ?",
        "Si je te proposais un strip visio par tour, tu serais partant¬∑e ?",
        "Quelle est la chose la plus coquine que tu aies faite au t√©l√©phone ?",
        "Quel est ton fantasme le plus r√©aliste √† r√©aliser en ligne ?",
        "Si je te dis ‚Äúon fait un jeu coquin par audio ce soir‚Äù, tu dis quoi ?",
        "Quel est le moment de la journ√©e o√π tu es le plus chaud¬∑e ?",
        "As-tu d√©j√† jou√© avec toi-m√™me en pensant √† moi ? Raconte sans tabou.",
        "Que dirais‚Äëtu si je te proposais un appel vid√©o torride maintenant ?",
        "Tu pr√©f√®res me regarder ou m‚Äô√©couter pendant un moment tr√®s hot ?",
        "Quel est le truc le plus coquin que tu pourrais faire avec un objet pr√®s de toi ?",
        "Tu m‚Äôenvoies un message audio sexy maintenant ? (ose üòà)",
        "T‚Äôas d√©j√† fantasm√© sur ce qu‚Äôon ferait dans le m√™me lit ?",
        "Envoie‚Äëmoi une phrase hot que tu voudrais me dire les yeux dans les yeux."
    ],
    "Dare Time": [
        "Envoie une photo d‚Äôun endroit de ton corps que j‚Äôadore (sans visage).",
        "Enregistre un audio tr√®s lent o√π tu dis ce que tu ferais si j‚Äô√©tais l√†.",
        "Vid√©o : dis quelque chose de chaud avec un regard de tueur¬∑euse.",
        "Choisis un mot, et chaque fois que tu l‚Äôentends aujourd‚Äôhui, pense √† moi nu¬∑e.",
        "Envoie un vocal o√π tu g√©mis discr√®tement pendant 10 secondes.",
        "Fais un strip‚Äëtease d‚Äôune pi√®ce √† la cam√©ra.",
        "Envoie un selfie √† moiti√© couvert¬∑e (laisse deviner le reste).",
        "√âcris une mini‚Äëhistoire..."
    ]
}

# === GAME STATE STORAGE ===
pending_games = {}  # game_id: {
                   #   'host': user_id,
                   #   'players': [user_id1, user_id2],
                   #   'current_turn': int (index of player choosing question),
                   #   'messages': [(chat_id, message_id), ...],
                   #   'active': True/False
                   # }

# === UTILITY FUNCTIONS ===
def create_category_menu():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    for category in questions.keys():
        markup.add(InlineKeyboardButton(category, callback_data=f"category_{category}"))
    markup.add(InlineKeyboardButton("Fin de partie", callback_data="end_game"))
    return markup

def create_end_game_button():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("Fin de partie", callback_data="end_game"))
    return markup

def delete_game_messages(game_id):
    if game_id in pending_games:
        for chat_id, message_id in pending_games[game_id]['messages']:
            try:
                bot.delete_message(chat_id, message_id)
            except:
                pass
        del pending_games[game_id]

# === COMMANDES DE BASE ===
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    args = message.text.split()
    
    if len(args) >= 1 and args[1].startswith("join_"):
        game_id = args[1].replace("join_", "")
        if game_id in pending_games and len(pending_games[game_id]['players']) < 2:
            pending_games[game_id]['players'].append(user_id)
            bot.send_message(user_id, "Tu as rejoint la partie ! En attente du host pour commencer üòè")
            bot.send_message(
                pending_games[game_id]['host'], 
                "Ton partenaire a rejoint ! Clique pour d√©marrer la partie :",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton("D√©marrer la partie", callback_data=f"start_game_{game_id}")]
                ])
            )
        else:
            bot.send_message(user_id, "Lien invalide ou partie d√©j√† compl√®te.")
    else:
        markup = InlineKeyboardMarkup()
        markup.row_width = 1
        markup.add(
            InlineKeyboardButton("Jouer en solo üé≤", callback_data="solo"),
            InlineKeyboardButton("Jouer √† deux ‚ù§Ô∏è", callback_data="multiplayer")
        )
        bot.send_message(user_id, "Bienvenue dans *Hot & Curious* üî•\nChoisis un mode :", parse_mode='Markdown', reply_markup=markup)

# === D√âBUT DE PARTIE MULTIJOUEUR ===
@bot.callback_query_handler(func=lambda call: call.data == "multiplayer")
def multiplayer_mode(call):
    user_id = call.from_user.id
    game_id = str(user_id)
    pending_games[game_id] = {
        'host': user_id,
        'players': [user_id],
        'current_turn': 0,
        'messages': [],
        'active': False
    }
    invite_link = f"https://t.me/{bot_username}?start=join_{game_id}"
    bot.send_message(user_id, f"Envoie ce lien √† ton/ta partenaire pour commencer :\n{invite_link}")

# === START MULTIPLAYER GAME ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("start_game_"))
def start_multiplayer_game(call):
    user_id = call.from_user.id
    game_id = call.data.split("_")[2]
    if game_id not in pending_games or pending_games[game_id]['host'] != user_id:
        bot.send_message(user_id, "Tu n'es pas l'h√¥te de cette partie.")
        return
    if len(pending_games[game_id]['players']) != 2:
        bot.send_message(user_id, "Attends que ton partenaire rejoigne la partie !")
        return
    
    pending_games[game_id]['active'] = True
    for player_id in pending_games[game_id]['players']:
        msg = bot.send_message(
            player_id,
            f"La partie commence ! <@{pending_games[game_id]['players'][0]}> choisit la premi√®re cat√©gorie.",
            parse_mode='Markdown',
            reply_markup=create_category_menu()
        )
        pending_games[game_id]['messages'].append((player_id, msg.message_id))
    bot.answer_callback_query(call.id)

# === S√âLECTION DE CAT√âGORIE ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def select_category(call):
    user_id = call.from_user.id
    game_id = None
    for gid, game in pending_games.items():
        if user_id in game['players'] and game['active']:
            game_id = gid
            break
    
    if not game_id:
        bot.send_message(user_id, "Aucune partie active trouv√©e.")
        return
    
    game = pending_games[game_id]
    current_player_idx = game['current_turn'] % 2
    if user_id != game['players'][current_player_idx]:
        bot.send_message(user_id, "Ce n'est pas ton tour de choisir !")
        return
    
    category = call.data.replace("category_", "")
    if category not in questions:
        bot.send_message(user_id, "Cat√©gorie invalide.")
        return
    
    question = random.choice(questions[category])
    responder_idx = (current_player_idx + 1) % 2
    responder_id = game['players'][responder_idx]
    
    # Send question to both players
    for player_id in game['players']:
        msg_text = f"*{category}*\n{question}\n<@{responder_id}> r√©pond √† cette question !"
        msg = bot.send_message(
            player_id,
            msg_text,
            parse_mode='Markdown',
            reply_markup=create_end_game_button()
        )
        game['messages'].append((player_id, msg.message_id))
    
    # Prompt responder to answer
    bot.send_message(responder_id, "Envoie ta r√©ponse dans le chat !")
    
    # Update turn
    game['current_turn'] += 1
    next_chooser_idx = game['current_turn'] % 2
    next_chooser_id = game['players'][next_chooser_idx]
    msg = bot.send_message(
        next_chooser_id,
        f"Ton tour de choisir une cat√©gorie, <@{next_chooser_id}> !",
        parse_mode='Markdown',
        reply_markup=create_category_menu()
    )
    game['messages'].append((next_chooser_id, msg.message_id))
    
    bot.answer_callback_query(call.id)

# === FIN DE PARTIE ===
@bot.callback_query_handler(func=lambda call: call.data == "end_game")
def end_game(call):
    user_id = call.from_user.id
    game_id = None
    for gid, game in pending_games.items():
        if user_id in game['players'] and game['active']:
            game_id = gid
            break
    
    if not game_id:
        bot.send_message(user_id, "Aucune partie active trouv√©e.")
        return
    
    # Notify players
    for player_id in pending_games[game_id]['players']:
        msg = bot.send_message(player_id, "Partie termin√©e ! √Ä bient√¥t pour un autre round üî•")
        try:
            bot.delete_message(player_id, msg.message_id)
        except:
            pass
    
    # Delete messages
    delete_game_messages(game_id)
    bot.answer_callback_query(call.id)

# === D√âBUT DE PARTIE SOLO ===
@bot.callback_query_handler(func=lambda call: call.data == "solo")
def solo_mode(call):
    user_id = call.from_user.id
    send_question(user_id)

# === ENVOI QUESTION SOLO ===
def send_question(user_id):
    niveau = random.choice(list(questions.keys()))
    question = random.choice(questions[niveau])
    bot.send_message(user_id, f"*{niveau}*\n{question}", parse_mode='Markdown')

# === FLASK WEBHOOK ===
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return '', 200

@app.route('/')
def index():
    return 'Bot en ligne !'

if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
